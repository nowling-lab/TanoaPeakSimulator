import argparse
import os

from tanoa import get_random_base_pair_string
from tanoa import get_random_base_pair_string_list
from tanoa import generate_output_files
from tanoa import Chromosome 

def generate_peaks(args):
  """
  Checks the arguments and then calls the requisite do_generation method
  :params args: the agruments from the argparser 
  """
  if not os.path.exists(args.outputdir):
      os.makedirs(args.outputdir)

  if args.sequence_file is None:
      print("The sequence file path was not found")
      return

  do_generation(args.enhancer_length, args.read_length, args.num_reads, 
  args.num_enhancers, args.sequence_file, args.outputdir)

def do_generation(location_length, read_length, num_reads, num_enhancers,
    reads_file_name, outputdir):
    """
    Reads the file and generates the output files using the tanoa package
    :param location_length: The length of the enhancer sequences
    :param read_length: the length of the reads within the enhancer sequences
    :param num_reads: the amount of reads to take per enhancer sequence
    :param num_enhancers: the amount of enhancer sequences chosen to take reads from
    :param reads_file_name: the file name which contains the sequence file
    :param outputdir: the output directory for the output files
    """

    output_file_name = "sample_regions.txt"
    samples_file_name = "reads.fasta"
    fasta_read_file_name = reads_file_name
    read_counts_file_name = "depth_data.txt"

    output_file = open(outputdir + "/" + output_file_name, 'w')
    samples_file = open(outputdir + "/" + samples_file_name, 'w')
    read_counts_file = open(outputdir + "/" + read_counts_file_name, 'w')
    # sets all prerequisite file names, and creates the output files in the output directory
    read_number = 0
    with open(fasta_read_file_name, "r") as file:
        header = file.readline()
        sequence = ""
        for line in file: 
            if '>' in line:
                chromosome = Chromosome(header, sequence)
                read_counts_dict = {}
                for x in range(num_enhancers): # for each chromosome, enhancers are chosen
                    # and reads are taken. These will all be contained in the same output file
                    get_random_base_pair_string(location_length, read_length, chromosome.sequence,
                                                chromosome.enhancer_list)
                    chromosome.reads_list, read_number = get_random_base_pair_string_list(
                        chromosome.enhancer_list, read_length, num_reads,
                        chromosome.sequence, chromosome.chromosome_name, read_number, read_counts_dict)
                generate_output_files(chromosome, output_file, samples_file, read_counts_file, read_counts_dict)
                header = line
                sequence = ""
            line = line.rstrip()
            sequence += line

    output_file.close()
    samples_file.close()

def parseargs():
    parser = argparse.ArgumentParser(description="Tanoa")

    parser.add_argument("--enhancer-length",
                        type=int,
                        default=1000,
                        help="Length of enhancer regions, default = 1000")

    parser.add_argument("--num-enhancers",
                        type=int,
                        default=None,
                        required=True,
                        help="The number of enhancer regions sampled")

    parser.add_argument("--read-length",
                        type=int,
                        default=100,
                        help="Length of reads in each enhancer region, default = 100")

    parser.add_argument("--num-reads",
                        type=int,
                        default=None,
                        required=True,
                        help="The number of reads per each enhancer region")

    parser.add_argument("--sequence-file",
                        type=str,
                        required=True,
                        help=".fasfa file with nucleotide data from DNA sequencing")

    parser.add_argument("--outputdir",
                        type=str,
                        required=True,
                        help="Output file directory")

    return parser.parse_args()

if __name__ == "__main__":
    args = parseargs()
    generate_peaks(args)
